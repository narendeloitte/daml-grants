module Grants where    

import Daml.Script
import ApplicantInfo
import DA.List (head)


type GrantOpportunityId = ContractId GrantOpportunity
type GrantAppId = ContractId GranteeApplication

template GrantingAgency 
  with 
    administrator: Party 
    grantingAgency: Party 
  where 
    signatory administrator 
    observer grantingAgency
    ensure administrator /= grantingAgency

    key (administrator, grantingAgency): (Party, Party)
    maintainer key._1

    nonconsuming choice CreateGrant : (ContractId GrantOpportunity )
      with
        title: Text                
        typeOfGrant: Text
        description: Text
        totalAmount: Numeric 2        
        status: Text        
        contact: Text
        email: Text        
        grantFunder: Party
      controller grantingAgency
        do create GrantOpportunity with ..

template GrantOpportunity
    with       
        title: Text        
        grantingAgency: Party
        typeOfGrant: Text
        description: Text
        totalAmount: Numeric 2        
        status: Text        
        contact: Text
        email: Text
        administrator: Party 
        grantFunder: Party
    where
        ensure totalAmount > 0.0        
        
        key (grantingAgency, administrator,title): (Party, Party,Text)
        maintainer key._1 

        signatory grantingAgency
        observer  administrator,grantFunder

        nonconsuming choice FundGrant: GrantOpportunityId
            with
                fundAmount: Numeric 2                  
            controller grantFunder, grantingAgency 
                do
                    create this with
                      status = "Funded"
                      totalAmount = fundAmount
                      grantFunder = grantFunder 
       

template GrantOpportunityApplications
  with
    grantOpportunity: GrantOpportunity
    granteeApplicationList: [GranteeApplication]
    technicalReviewer: Party
    granteeApplicationPassedList: [GranteeApplication]
    granteeApplicationAwarded: GranteeApplication
  where
    signatory grantOpportunity.grantingAgency
    observer technicalReviewer

    choice AppendApplications: ContractId GrantOpportunityApplications
      with
        granteeApplication: [GranteeApplication]
      controller grantOpportunity.grantingAgency    
       do
        let allAppList = granteeApplicationList ++ granteeApplication                    
        if granteeApplicationList == [] 
            then create this with 
                granteeApplicationList = granteeApplication
            else create this with 
                granteeApplicationList = allAppList

    -- BPA - returns only the list of applications that pass review
    -- can we ensure this occurs before award? or do we need to rethink the logic
    choice ReviewApplications: ContractId GrantOpportunityApplications
      with     
      controller technicalReviewer -- added technicalReviewer as a controller
       do
        let overBudget = 0.15*grantOpportunity.totalAmount -- replace 1.15 with 0.15
        let tempList = granteeApplicationList
        let filteredAppList = filter (\e -> e.totalProjectBudget < overBudget) granteeApplicationList                    
        create this with 
                granteeApplicationPassedList = filteredAppList
    
    -- choice AwardApplications once access issue on filter is solved this can be implemented the same way
    -- take the first item where the application has passed
    choice AwardApplications: ContractId GrantOpportunityApplications
      with
      controller grantOpportunity.grantingAgency
       do
        let awardedContract = head granteeApplicationPassedList
        create this with granteeApplicationAwarded = awardedContract

        

test_Grants : Script (ContractId GrantOpportunityApplications)

test_Grants = do

aliceAgency <- allocateParty "AliceAgency"
bob <- allocateParty "Bob"    
administrator <- allocateParty "Admin"   

agency1 <- submit administrator do 
  createCmd GrantingAgency 
    with 
      administrator = administrator 
      grantingAgency = aliceAgency


opportunity1 <- submit aliceAgency do 
  exerciseCmd agency1 CreateGrant 
    with 
      title = "Opportunity1"                    
      typeOfGrant= "Type1"
      description= "Test Opportunity1"
      totalAmount= 100000.00
      contact= "9876543298"
      email= "abc@gmail.com"
      status="New"
      grantFunder=bob

let 
  var_opportunity1 = GrantOpportunity with
    title = "Opportunity1"                    
    typeOfGrant= "Type1"
    description= "Test Opportunity1"
    totalAmount= 100000.00
    contact= "9876543298"
    email= "abc@gmail.com"
    status="New"
    grantFunder=bob    
    grantingAgency=aliceAgency
    administrator=administrator
alice <- allocateParty "Alice"
jija <- allocateParty "Jija"
let
    applicantAlice = GranteeApplication with
      applicant = alice
      administrator= administrator
      applicantOrgnization= "Org1"
      contact = "9998887777"
      projectTitle = "Project1"
      totalProjectBudget = 1000.00
      preScreeningResults = True  

technicalReviewer <- allocateParty"TechnicalReviewer"

final1 <- submit aliceAgency do
  createCmd GrantOpportunityApplications
    with
      grantOpportunity =var_opportunity1
      granteeApplicationList =[applicantAlice]
      technicalReviewer=technicalReviewer
      granteeApplicationPassedList = []
      granteeApplicationAwarded = applicantAlice -- update script to include rveiw and award logic
      
let
    applicantJija = GranteeApplication with
      applicant = jija
      administrator= administrator
      applicantOrgnization= "Org1"
      contact = "9998887777"
      projectTitle = "Project1"
      totalProjectBudget = 1000.00
      preScreeningResults = True  

submit aliceAgency do
  exerciseCmd final1 AppendApplications
    with
      granteeApplication=[applicantJija] 
