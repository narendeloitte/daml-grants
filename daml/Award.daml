module Award where    

import Daml.Script
import DA.Date

template Award
    with
        title: Text        
        grantingAgency: Party
        typeOfGrant: Text
        description: Text
        totalAmount: Numeric 2
        closingDate: Date
        postedDate: Date
        status: Text        
        contact: Text
        email: Text
        administrator: Party 
        grantFunder: Party
        grantRecipient: Party
    
    where
        -- update the keys to use a grantID instead of a title string?
        key (grantingAgency,grantRecipient,title): (Party,Party,Text)
        maintainer key._1
        signatory grantingAgency,grantFunder,grantRecipient
        observer administrator



-- to delete - was testing accessing a list object while filtering
template TestData
    with
        me: Party
        rev: Int
        exp: Int
        budget: Int 
    where
        signatory me

template TestTemp
    with
        me: Party
        testList:[TestData] 
    where
        signatory me
        choice FilterList : ContractId TestTemp
            controller me
            do
    
                --let newList = filter (\(_,_,_,a) -> (a > 100)) testList
                let newList = filter (\e -> e.budget > 100) testList
                create this with testList = newList

{-
test_Award : Script (ContractId TestTemp)
test_Award = do

    aliceAgency <- allocateParty "AliceAgency"
    contract0 <- submit aliceAgency do
        createCmd TestData with me=aliceAgency,rev = 14,exp=345,budget=7000
    contract1 <- submit aliceAgency do 
        createCmd TestTemp with me = aliceAgency, testList = [(1,2,1),(3,4,1),(5,6,11)]
    submit aliceAgency do
        exerciseCmd contract1 FilterList
    

template TestGrant
    with
        me: Party
        testContr: ContractId TestData
        testList:[(Party,Int,Int,Int)] --[TestData] --contractId,ContractId,ContractId getField @"bar" r
    where
        signatory me
       {-choice FilterList : ContractId TestGrant
            controller me
            do
                let allAppList = testList 
                let oddList = filter (\(_,_,a) -> (a > 2)) allAppList
                create this with testList = oddList-}
        choice GetContractData : ContractId TestGrant
            controller me
            do  
                tempCID <- fetch testContr
                let extractList = [(tempCID.me,tempCID.rev,tempCID.exp,tempCID.budget)]
                create this with testList = extractList
        choice ExtractContractData : ContractId TestGrant
            controller me
            do
                --doubleMe : Int -> Int
                --doubleMe x = x + x
                {-extractAttributes : ContractId -> [(_,_,_,_)]  (id,x,y,z).(id,x,y)
                extractAttributes id = [(a,b,c,d)] where
                    temp <- fetch id
                    a = temp
                    b = temp.rev
                    c = temp.exp
                    d = temp.budget
                -} 
                -- then map over list of contract ids using extractAttributes fxn
                create this with testList


test_Award : Script (ContractId TestGrant)
test_Award = do

    aliceAgency <- allocateParty "AliceAgency"
    contract0 <- submit aliceAgency do
        createCmd TestData with me=aliceAgency,rev = 14,exp=345,budget=7000
    contract1 <- submit aliceAgency do 
        createCmd TestGrant with me = aliceAgency,testContr=contract0, testList = [(1,2,1),(3,4,1),(5,6,11)]
    --submit aliceAgency do
    --    exerciseCmd contract1 FilterList
    submit aliceAgency do
       exerciseCmd contract1 GetContractData



-}
            
            

                

    



